import os
import time
from itertools import cycle
from asgiref.sync import sync_to_async

import phonenumbers
from aiogram import Bot, Dispatcher
from aiogram import executor
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData
from django.core.management import BaseCommand
from bot.models import User, Order, Flower
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"


events = ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ üéÅ', '–°–≤–∞–¥—å–±–∞ üë∞‚Äç‚ôÄÔ∏è', '8 –º–∞—Ä—Ç–∞ üå∫', '–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ ü§±', '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç / –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ü§î']

budgets = {
    '–î–æ 1000—Ä': range(1000),
    '–î–æ 5000—Ä': range(5000),
    '–î–æ 10000—Ä': range(10000),
    '–ë–æ–ª–µ–µ 10000—Ä': range(10001, 300000),
}

catalog = {
    'compositions': {
        'filepath': "3137.jpg",
        'caption': '–≠—Ç–æ—Ç –±—É–∫–µ—Ç –Ω–µ—Å–µ—Ç –≤ —Å–µ–±–µ –≤—Å—é –Ω–µ–∂–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —á—É–≤—Å—Ç–≤ –∏ –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã—Ö '
                   '–Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–¥—Ü–∞!',
        'price': 500,
        'event': '—Å–≤–∞–¥—å–±–∞'
    },
    'compositions1': {
        'filepath': "586e0d6adfade_30.jpg",
        'caption': '–≠—Ç–æ—Ç –±—É–∫–µ—Ç –Ω–µ—Å–µ—Ç –≤ —Å–µ–±–µ –µ—â–µ —á—Ç–æ-—Ç–æ',
        'price': 6000,
        'event': '—Ä–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞'
    },
    'compositions2': {
        'filepath': "13---_enl.jpg",
        'caption': '–≠—Ç–æ—Ç –±—É–∫–µ—Ç –Ω–µ—Å–µ—Ç —Å—á–∞—Å—Ç—å–µ',
        'price': 1500,
        'event': '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'
    },
    'compositions3': {
        'filepath': "img-2122032.jpg",
        'caption': '–≠—Ç–æ—Ç –±—É–∫–µ—Ç –Ω–µ—Å–µ—Ç –≤ —Å–µ–±–µ —Ä–∞—Å—Ç—Ä–∞—Ç—ã',
        'price': 11900,
        'event': '–≤–æ—Å—å–º–æ–µ –º–∞—Ä—Ç–∞'
    },
}

price_cb = CallbackData('price', 'action', 'price')
home_cb = CallbackData('home', 'action', 'category')
access_cb = CallbackData('access', 'action', 'user_access')

def get_price_keyboard():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton('–î–æ 1000 —Ä—É–±.', callback_data=price_cb.new(action='flower_price', price=999)),
        types.InlineKeyboardButton('–î–æ 5000 —Ä—É–±.', callback_data=price_cb.new(action='flower_price', price=4999))).row(
        types.InlineKeyboardButton('–î–æ 10000 —Ä—É–±.', callback_data=price_cb.new(action='flower_price', price=9999)),
        types.InlineKeyboardButton('–ë–æ–ª–µ–µ 10000 —Ä—É–±.', callback_data=price_cb.new(action='flower_price', price=10001))).row(
        types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=price_cb.new(action='–ù–∞–∑–∞–¥', price=0))
        )

def get_home_keyboard():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ üéÅ', callback_data=home_cb.new(action='category', category='–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ')),
        types.InlineKeyboardButton('–°–≤–∞–¥—å–±–∞ üë∞‚Äç‚ôÄÔ∏è', callback_data=home_cb.new(action='category', category='–°–≤–∞–¥—å–±–∞'))).row(
        types.InlineKeyboardButton('8 –º–∞—Ä—Ç–∞ üå∫', callback_data=home_cb.new(action='category', category='8 –º–∞—Ä—Ç–∞')),
        types.InlineKeyboardButton('–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ ü§±', callback_data=home_cb.new(action='category', category='–†–æ–∂–¥–µ–Ω–∏–µ'))).row(
        types.InlineKeyboardButton('–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç / –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ü§î', callback_data=home_cb.new(action='–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', category='–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'))
        )

def get_access_keyboard():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω', callback_data=home_cb.new(action='access', user_access=True)),
        types.InlineKeyboardButton('–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data=home_cb.new(action='access', user_access=False)))

def get_valid_phone(input_number: str):
    try:
        parse_number = phonenumbers.parse(input_number, "RU")
        national_number = phonenumbers.format_number(parse_number, phonenumbers.PhoneNumberFormat.E164)
        if phonenumbers.is_valid_number(parse_number):
            return national_number
    except phonenumbers.NumberParseException:
        print("–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"+79876665544")


class Global(StatesGroup):
    event = State()
    category_event = State()
    our_event = State()
    budget = State()
    bouquet = State()
    person_data = State()
    registration_name = State()
    registration_phonenumber = State()
    cancel = State()
    our_budget = State()
    address_street = State()
    address_number_house = State()
    address_number_flat = State()
    address_number_driveway = State()


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        bot = Bot(BOT_TOKEN, parse_mode='HTML')
        storage = MemoryStorage()
        dp = Dispatcher(bot, storage=storage)

        async def on_startup(dp):
            await set_default_commands(dp)
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        async def set_default_commands(dp):
            await dp.bot.set_my_commands(
                [
                    types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
                ]
            )

        cycle_pfilepath = cycle(catalog.items())
        @dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state="*")
        @dp.message_handler(commands='start', state="*")
        async def flower_start(message: types.Message):
            await message.answer(
                f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message['from'].first_name}!\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–æ–≤ üíê\n\n–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è?\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π</b>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
                reply_markup=get_home_keyboard()
            )
            await Global.event.set()

        # –í–µ—Ç–∫–∞ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        @dp.callback_query_handler(home_cb.filter(action='–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'))
        async def get_event(query: types.CallbackQuery, callback_data: dict, state: FSMContext):
            await state.update_data(chosen_event=callback_data['category'])
            await bot.edit_message_text(
                "<b>–£–∫–∞–∂–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±—É–∫–µ—Ç?</b>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
                query.from_user.id,
                query.message.message_id
            )
            await Global.our_event.set()

        @dp.message_handler(state=Global.our_event)
        async def get_our_budget(message: types.Message, state: FSMContext):
            await state.update_data(chosen_event=message.text)
            await message.answer(
                "<b>–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç</b>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
                reply_markup=get_price_keyboard()
            )
            await Global.our_budget.set()

        @dp.callback_query_handler(price_cb.filter(action='flower_price'), state=Global.our_budget)
        async def get_our_access(query: types.CallbackQuery, callback_data: dict):
            await state.update_data(chosen_price=callback_data['price'])
            await state.update_data(chosen_bouquet='–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
            await bot.edit_message_text(
                "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ–ª–æ—Ä–∏—Å—Ç—É, –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è "
                "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. "
                "–î–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</b>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
                query.from_user.id,
                query.message.message_id,
                reply_markup=get_access_keyboard()
            )
            await Global.person_data.set()

        # –í–µ—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑–º –º–µ–Ω—é
        # @dp.message_handler(state=Global.event)
        # async def get_event(message: types.Message, state: FSMContext):
        #     await state.update_data(chosen_event=message.text)
        #     # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        #     # keyboard.add('‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        #     # for description, budget in budgets.items():
        #     #     keyboard.insert(description)
        #     # await message.answer(
        #     #     "<b>–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º?</b>",
        #     #     reply_markup=keyboard
        #     # )
        #     await message.reply("<b>–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç</b>", reply_markup=get_price_keyboard())
        #     # await Global.budget.set()
        
        @dp.callback_query_handler(home_cb.filter(action='category'))
        async def vote_event_category(query: types.CallbackQuery, callback_data: dict, state=Global.event):
            event_category = callback_data['category']
            await state.update_data(chosen_category=event_category)
            await bot.edit_message_text(
                f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é - {event_category}\n\n–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç</b>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è',
                query.from_user.id,
                query.message.message_id,
                reply_markup=get_price_keyboard()
            )
            # await Global.budget.set()
        
        @dp.callback_query_handler(price_cb.filter(action='–ù–∞–∑–∞–¥'))
        async def back_to_home_menu(query: types.CallbackQuery, callback_data: dict):
            await bot.edit_message_text(
                f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {query['from'].first_name}!\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–æ–≤ üíê\n\n–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è?\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π</b>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
                query.from_user.id,
                query.message.message_id,
                reply_markup=get_home_keyboard()
            )


        # @dp.message_handler(state=Global.budget)
        # async def get_budget(message: types.Message, state: FSMContext):
        #     await state.update_data(chosen_price=budgets[message.text])
        #     await message.answer("<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –±—É–∫–µ—Ç</b>")
        #     # flowers = Flower.objects.all()
        #     # print(flowers)
        #     print(message)

            # for budget in get_budgets_filtered(event=user_data['chosen_event'], #–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—É–∫–µ—Ç–∞ –ø–æ –¥–≤—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            #                                    price=user_data['chosen_price']):
            #     keyboard.insert(budget)

            # next_bouquet = next(cycle_pfilepath)
            # order_button = InlineKeyboardButton(f'–ó–∞–∫–∞–∑–∞—Ç—å {next_bouquet[0]}', callback_data=f'{next_bouquet[0]}')
            # next_btn = InlineKeyboardButton(text="next", callback_data="–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç")
            # ikb = InlineKeyboardMarkup().add(order_button, next_btn)
            # await bot.send_photo(
            #     message.from_user.id,
            #     photo=open(f'img/{dict(next_bouquet[1])["filepath"]}', 'rb'),
            #     caption=f'{dict(next_bouquet[1])["caption"]},'
            #             f' —Ü–µ–Ω–∞: {dict(next_bouquet[1])["price"]}',
            #     reply_markup=ikb
            # )
            # await Global.bouquet.set()

        @dp.callback_query_handler(text="–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç", state=Global.bouquet)
        async def get_next(message: types.Message):
            next_bouquet = next(cycle_pfilepath)
            order_button = InlineKeyboardButton(f'–ó–∞–∫–∞–∑–∞—Ç—å {next_bouquet[0]}', callback_data=f'{next_bouquet[0]}')
            next_btn = InlineKeyboardButton(text="next", callback_data="–°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç")
            ikb = InlineKeyboardMarkup().add(order_button, next_btn)
            await bot.send_photo(
                message.from_user.id,
                photo=open(f'img/{dict(next_bouquet[1])["filepath"]}', 'rb'),
                caption=f'{dict(next_bouquet[1])["caption"]},'
                        f' —Ü–µ–Ω–∞: {dict(next_bouquet[1])["price"]}',
                reply_markup=ikb
            )
            await Global.bouquet.set()

        @dp.callback_query_handler(lambda callback_query: callback_query, state=Global.bouquet)
        async def get_access(callback: types.CallbackQuery, state: FSMContext) -> None:
            await state.update_data(chosen_bouquet=callback.data)
            await state.update_data(bouquet_photo_id=callback.message["photo"][0]["file_id"])
            await state.update_data(bouquet_price=catalog[f'{callback.data}']['price'])
            user_data = await state.get_data()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("–°–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
            await callback.message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_data['chosen_bouquet']}. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
                f"–î–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboard
            )
            await Global.person_data.set()

        @dp.message_handler(state=Global.person_data)
        async def register_user(message: types.Message, state: FSMContext):
            if message.text == '–°–æ–≥–ª–∞—Å–µ–Ω':
                await state.update_data(access='Access')
                await message.answer(
                    '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:',
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await Global.registration_name.set()
            else:
                await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')
                await Global.person_data.set()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        @dp.message_handler(lambda message: message.text.isdigit(), state=Global.registration_name)
        async def get_valid_name(message: types.Message):
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è')

        @dp.message_handler(state=Global.registration_name)
        async def get_name(message: types.Message, state: FSMContext):
            await state.update_data(full_name=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

            await Global.registration_phonenumber.set()

        @dp.message_handler(state=Global.registration_phonenumber)
        async def get_phone_number(message: types.Message, state: FSMContext):
            if get_valid_phone(message.text):
                valid_number = get_valid_phone(message.text)
                await message.answer(f'–í–∞—à –Ω–æ–º–µ—Ä: {valid_number}')
                await state.update_data(phone_number=valid_number)
                await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–µ–º –∞–¥—Ä–µ—Å, –Ω–∞—á–Ω–µ–º —Å —É–ª–∏—Ü—ã:')
                await Global.address_street.set()
            else:
                await message.answer(f'–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"+79876665544')
                await Global.registration_phonenumber.set()

        @dp.message_handler(state=Global.address_street)
        async def get_street(message: types.Message, state: FSMContext):
            await state.update_data(address_street=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:')
            await Global.address_number_house.set()

        @dp.message_handler(state=Global.address_number_house)
        async def get_house_number(message: types.Message, state: FSMContext):
            await state.update_data(address_number_house=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞, –µ—Å–ª–∏ —É –≤–∞—Å —á–∞—Å—Ç–Ω—ã–π –¥–æ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ 1:')
            await Global.address_number_driveway.set()

        @dp.message_handler(state=Global.address_number_driveway)
        async def get_house_driveway(message: types.Message, state: FSMContext):
            await state.update_data(address_number_driveway=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:')
            await Global.address_number_flat.set()

        @dp.message_handler(state=Global.address_number_flat)
        async def get_order_info(message: types.Message, state: FSMContext):
            await state.update_data(address_number_flat=message.text)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            user_data = await state.get_data()
            user_db = await User.objects.filter(chat_id=message.chat.id)
            order = await Order.objects.create(
                user = user_db.id,
                flower = user_data['chosen_bouquet'], # –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –±—É–∫–µ—Ç–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç –±—É–∫–µ—Ç—ã –∏–∑ –±–∞–∑—ã,
                courier = 1,
                address = f'{user_data["address_street"]}, {user_data["address_number_house"]}, {user_data["address_number_driveway"]}, {user_data["address_number_flat"]}, {user_data["phone_number"]}',
                delivery_date = time.localtime(),
                count = 1
            )
            print(user_db, order)
            if user_data.get('bouquet_photo_id'):
                await message.reply('–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω')
                await bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=user_data['bouquet_photo_id'],
                    caption=f'<b>–ë—É–∫–µ—Ç: {user_data["chosen_bouquet"]}\n'
                            f'–°–æ–±—ã—Ç–∏–µ: {user_data["chosen_event"]}\n'
                            f'–¶–µ–Ω–∞: {user_data["bouquet_price"]}\n'
                            f'–ê–¥—Ä–µ—Å:\n'
                            f'–£–ª–∏—Ü–∞: {user_data["address_street"]}\n'
                            f'–ù–æ–º–µ—Ä –¥–æ–º–∞: {user_data["address_number_house"]}\n'
                            f'–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: {user_data["address_number_driveway"]}\n'
                            f'–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {user_data["address_number_flat"]}\n'
                            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data["phone_number"]}</b>',
                    reply_markup=keyboard)

                await state.finish()
            else:
                await message.reply(
                    '–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ñ–ª–æ—Ä–∏—Å—Ç.'
                )
                await bot.send_message(
                    chat_id=message.from_user.id, text=
                    f'<b>–ë—É–∫–µ—Ç: {user_data["chosen_bouquet"]}\n'
                    f'–°–æ–±—ã—Ç–∏–µ: {user_data["chosen_event"]}\n'
                    f'–ê–¥—Ä–µ—Å:\n'
                    f'–£–ª–∏—Ü–∞: {user_data["address_street"]}\n'
                    f'–ù–æ–º–µ—Ä –¥–æ–º–∞: {user_data["address_number_house"]}\n'
                    f'–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: {user_data["address_number_driveway"]}\n'
                    f'–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {user_data["address_number_flat"]}\n'
                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data["phone_number"]}</b>', reply_markup=keyboard
                )

                await state.finish()

        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
